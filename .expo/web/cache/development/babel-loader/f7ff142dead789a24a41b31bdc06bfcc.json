{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject,\n    _jsxFileName = \"/Users/ntommy/Projects/wisesaying/screens/Login.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useRef } from 'react';\nimport AuthLayout from \"../components/auth/AuthLayout\";\nimport { TextInput } from \"../components/auth/AuthShared\";\nimport AuthButton from \"../components/auth/AuthButton\";\nimport { useForm } from 'react-hook-form';\nimport { useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/client';\nimport { isLoggedInVar, logUserIn } from \"../apollo\";\nvar LOGIN_MUTATION = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  mutation login($email: String!, $password: String!){\\n    login(email:$email, password:$password){\\n      ok\\n      token\\n      error\\n    }\\n  }\\n\"])));\nexport default function Login(_ref) {\n  var _route$params, _route$params2;\n\n  var route = _ref.route;\n  console.log(route);\n\n  var _useForm = useForm({\n    defaultValues: {\n      password: route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.password,\n      email: route == null ? void 0 : (_route$params2 = route.params) == null ? void 0 : _route$params2.email\n    }\n  }),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      setValue = _useForm.setValue,\n      watch = _useForm.watch;\n\n  var passwordRef = useRef();\n  console.log(watch());\n\n  var onCompleted = function onCompleted(data) {\n    var _data$login, ok, token;\n\n    return _regeneratorRuntime.async(function onCompleted$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(data);\n            _data$login = data.login, ok = _data$login.ok, token = _data$login.token;\n\n            if (!ok) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(logUserIn(token));\n\n          case 5:\n            _context.next = 8;\n            break;\n\n          case 7:\n            Alert.alert(\"로그인 실패\", \"아이디 또는 비밀번호를 확인해주세요.\");\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useMutation = useMutation(LOGIN_MUTATION, {\n    onCompleted: onCompleted\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      loginMutation = _useMutation2[0],\n      loading = _useMutation2[1].loading;\n\n  var onNext = function onNext(next) {\n    var _next$current;\n\n    next == null ? void 0 : (_next$current = next.current) == null ? void 0 : _next$current.focus();\n  };\n\n  var onValid = function onValid(data) {\n    console.log(data);\n\n    if (!loading) {\n      loginMutation({\n        variables: {\n          email: data.email,\n          password: data.password\n        }\n      });\n    }\n  };\n\n  useEffect(function () {\n    register(\"email\");\n    register(\"password\");\n  }, [register]);\n  return React.createElement(AuthLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, React.createElement(TextInput, {\n    value: watch(\"email\"),\n    autoCapitalize: \"none\",\n    placeholder: \"\\uC544\\uC774\\uB514\",\n    placeholderTextColor: \"gray\",\n    returnKeyType: \"next\",\n    onSubmitEditing: function onSubmitEditing() {\n      return onNext(passwordRef);\n    },\n    onChangeText: function onChangeText(text) {\n      return setValue(\"email\", text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), React.createElement(TextInput, {\n    value: watch(\"password\"),\n    ref: passwordRef,\n    placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n    placeholderTextColor: \"gray\",\n    returnKeyType: \"done\",\n    autoCapitalize: \"none\",\n    onSubmitEditing: handleSubmit(onValid),\n    onChangeText: function onChangeText(text) {\n      return setValue(\"password\", text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), React.createElement(AuthButton, {\n    text: \"Log in\",\n    disabled: !watch(\"email\") || !watch(\"password\"),\n    onPress: handleSubmit(onValid),\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/ntommy/Projects/wisesaying/screens/Login.js"],"names":["React","useRef","AuthLayout","TextInput","AuthButton","useForm","useEffect","gql","useMutation","isLoggedInVar","logUserIn","LOGIN_MUTATION","Login","route","console","log","defaultValues","password","params","email","register","handleSubmit","setValue","watch","passwordRef","onCompleted","data","login","ok","token","Alert","alert","loginMutation","loading","onNext","next","current","focus","onValid","variables","text"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View ,Text, TouchableOpacity, Alert } from 'react-native';\nimport { useRef } from 'react';\nimport AuthLayout from '../components/auth/AuthLayout';\nimport { TextInput } from '../components/auth/AuthShared';\nimport AuthButton from '../components/auth/AuthButton';\nimport { useForm } from 'react-hook-form';\nimport { useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/client';\nimport { isLoggedInVar, logUserIn } from '../apollo';\n\nconst LOGIN_MUTATION = gql`\n  mutation login($email: String!, $password: String!){\n    login(email:$email, password:$password){\n      ok\n      token\n      error\n    }\n  }\n`;\n\nexport default function Login({route}){\n  console.log(route);\n  const {register, handleSubmit, setValue, watch} = useForm({\n    defaultValues:{\n      password: route?.params?.password,\n      email: route?.params?.email\n    }\n  })\n  const passwordRef = useRef();\n  console.log(watch());\n  const onCompleted = async (data)=>{\n    console.log(data)\n    const{\n      login: {ok,token},\n    } = data;\n    if(ok){\n      await logUserIn(token);\n    }else{\n      Alert.alert(\"로그인 실패\",\"아이디 또는 비밀번호를 확인해주세요.\")\n    }\n  }\n  const [loginMutation, {loading}] = useMutation(LOGIN_MUTATION,{\n    onCompleted,\n  });\n\n  const onNext = (next)=>{\n    next?.current?.focus(); \n  };\n  const onValid = (data)=>{\n    console.log(data)\n    if(!loading){\n      loginMutation({\n        variables:{\n          email:data.email,\n          password:data.password,\n        }\n      })\n    }\n  }\n\n  useEffect(()=>{\n    register(\"email\");\n    register(\"password\");\n  },[register])// runs only once, or if the 'register' changes\n\n  return(\n    <AuthLayout>\n      <TextInput\n        value={watch(\"email\")}\n        autoCapitalize={\"none\"}\n        placeholder=\"아이디\"\n        placeholderTextColor=\"gray\"\n        returnKeyType=\"next\"\n        onSubmitEditing={()=>onNext(passwordRef)}\n        onChangeText={(text)=>setValue(\"email\",text)}\n      />\n      <TextInput\n        value={watch(\"password\")}\n        ref={passwordRef}\n        placeholder=\"비밀번호\"\n        placeholderTextColor=\"gray\"\n        returnKeyType=\"done\"\n        autoCapitalize={\"none\"}\n        onSubmitEditing={handleSubmit(onValid)}\n        onChangeText={(text)=>setValue(\"password\",text)}\n      />\n      <AuthButton \n        text=\"Log in\" \n        disabled={!watch(\"email\")||!watch(\"password\")}  \n        onPress={handleSubmit(onValid)} \n        loading={loading} />\n    </AuthLayout>\n  )\n}"]},"metadata":{},"sourceType":"module"}