{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { ApolloClient, createHttpLink, InMemoryCache, makeVar, ApolloLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { relayStylePagination } from '@apollo/client/utilities';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { onError } from 'apollo-link-error';\n\nvar deduplicate = function deduplicate(array) {\n  var unique__ref = [];\n  var res = [];\n  array.forEach(function (obj) {\n    if (!unique__ref.includes(obj.__ref)) {\n      unique__ref.push(obj.__ref);\n      res.push(obj);\n    }\n  });\n  return res;\n};\n\nvar TOKEN = \"token\";\nexport var isLoggedInVar = makeVar(false);\nexport var tokenVar = makeVar(\"\");\nexport var logUserIn = function logUserIn(token) {\n  return _regeneratorRuntime.async(function logUserIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.multiSet([[TOKEN, token], [\"loggedIn\", \"yes\"]]));\n\n        case 2:\n          isLoggedInVar(true);\n          tokenVar(token);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var logUserOut = function logUserOut() {\n  return _regeneratorRuntime.async(function logUserOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(TOKEN));\n\n        case 2:\n          isLoggedInVar(false);\n          tokenVar(null);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nvar errorLink = onError(function (_ref) {\n  var graphQLErrors = _ref.graphQLErrors,\n      networkError = _ref.networkError;\n\n  if (graphQLErrors) {\n    console.log('graphQLErrors', graphQLErrors);\n  }\n\n  if (networkError) {\n    console.log('networkError', networkError);\n  }\n});\nvar httpLink = createHttpLink({\n  uri: \"http://54.180.106.241:4000/graphql\"\n});\nvar authLink = setContext(function (_, _ref2) {\n  var headers = _ref2.headers;\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: tokenVar()\n    })\n  };\n});\nvar link = ApolloLink.from([authLink, errorLink, httpLink]);\nvar client = new ApolloClient({\n  link: link,\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          searchTag: {\n            keyArgs: [\"keword\"],\n            merge: function merge() {\n              var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n              var incoming = arguments.length > 1 ? arguments[1] : undefined;\n              console.log(\"incoming:\", incoming);\n              return [].concat(_toConsumableArray(existing), _toConsumableArray(incoming));\n            }\n          },\n          searchAuthor: {\n            keyArgs: [\"keyword\"],\n            merge: function merge() {\n              var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n              var incoming = arguments.length > 1 ? arguments[1] : undefined;\n              console.log(\"incoming:\", incoming);\n              return [].concat(_toConsumableArray(existing), _toConsumableArray(incoming));\n            }\n          },\n          seeTagSaying: {\n            keyArgs: [\"id\"],\n            merge: function merge() {\n              var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n              var incoming = arguments.length > 1 ? arguments[1] : undefined;\n              return deduplicate([].concat(_toConsumableArray(existing), _toConsumableArray(incoming)));\n            }\n          },\n          seeAuthorSaying: {\n            keyArgs: [\"id\"],\n            merge: function merge() {\n              var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n              var incoming = arguments.length > 1 ? arguments[1] : undefined;\n              return deduplicate([].concat(_toConsumableArray(existing), _toConsumableArray(incoming)));\n            }\n          },\n          seeUserSaying: {\n            keyArgs: [\"id\"],\n            merge: function merge() {\n              var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n              var incoming = arguments.length > 1 ? arguments[1] : undefined;\n              console.log(\"existing:\", existing);\n              console.log('incoming:', incoming);\n              return deduplicate([].concat(_toConsumableArray(existing), _toConsumableArray(incoming)));\n            }\n          },\n          seeUserLike: {\n            keyArgs: [\"id\"],\n            merge: function merge() {\n              var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n              var incoming = arguments.length > 1 ? arguments[1] : undefined;\n              return deduplicate([].concat(_toConsumableArray(existing), _toConsumableArray(incoming)));\n            }\n          }\n        }\n      }\n    }\n  })\n});\nexport default client;","map":{"version":3,"sources":["/Users/ntommy/Projects/wisesaying/apollo.js"],"names":["ApolloClient","createHttpLink","InMemoryCache","makeVar","ApolloLink","setContext","relayStylePagination","AsyncStorage","onError","deduplicate","array","unique__ref","res","forEach","obj","includes","__ref","push","TOKEN","isLoggedInVar","tokenVar","logUserIn","token","multiSet","logUserOut","removeItem","errorLink","graphQLErrors","networkError","console","log","httpLink","uri","authLink","_","headers","authorization","link","from","client","cache","typePolicies","Query","fields","searchTag","keyArgs","merge","existing","incoming","searchAuthor","seeTagSaying","seeAuthorSaying","seeUserSaying","seeUserLike"],"mappings":"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","sourcesContent":["import { ApolloClient, createHttpLink, InMemoryCache, makeVar, ApolloLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { relayStylePagination } from '@apollo/client/utilities';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { onError } from 'apollo-link-error'\n\n\nconst deduplicate = (array)=>{\n  let unique__ref = [];\n  let res = [];\n  array.forEach((obj)=>{\n    if(!unique__ref.includes(obj.__ref)){\n      unique__ref.push(obj.__ref);\n      res.push(obj);\n    }\n  });\n  return res;\n}\n\nconst TOKEN = \"token\"\n\nexport const isLoggedInVar = makeVar(false);\nexport const tokenVar = makeVar(\"\");\n\nexport const logUserIn = async (token)=>{\n  await AsyncStorage.multiSet([\n    [TOKEN, token],\n    [\"loggedIn\", \"yes\"],\n  ]);\n  isLoggedInVar(true);\n  tokenVar(token);\n}\n\nexport const logUserOut = async()=>{\n  await AsyncStorage.removeItem(TOKEN);\n  isLoggedInVar(false);\n  tokenVar(null);\n}\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    console.log('graphQLErrors', graphQLErrors);\n  }\n  if (networkError) {\n    console.log('networkError', networkError);\n  }\n});\n\n\nconst httpLink = createHttpLink({\n  uri:\"http://54.180.106.241:4000/graphql\",\n});\n\nconst authLink = setContext((_,{headers})=>{\n  return{\n    headers:{\n      ...headers,\n      authorization: tokenVar()\n    }\n  }\n});\n\nconst link = ApolloLink.from([authLink,errorLink,httpLink]);\n\nconst client = new ApolloClient({\n  link: link,//authLink.concat(httpLink),\n  cache: new InMemoryCache({\n    typePolicies:{\n      Query:{\n        fields:{\n          searchTag:{\n            //keyArgs:false,\n            keyArgs:[\"keword\"],\n            merge(existing=[], incoming){\n              console.log(\"incoming:\",incoming);\n              return [...existing, ...incoming];\n            }\n          },\n          searchAuthor:{\n            //keyArgs:false,\n            keyArgs:[\"keyword\"],\n            merge(existing=[], incoming){\n              console.log(\"incoming:\",incoming);\n              return [...existing, ...incoming];\n            }\n          }, \n          seeTagSaying:{\n            keyArgs:[\"id\"],\n            merge(existing=[], incoming){\n              return deduplicate([...existing, ...incoming]);\n            }\n          },\n          seeAuthorSaying:{\n            keyArgs:[\"id\"],\n            merge(existing=[], incoming){\n              return deduplicate([...existing, ...incoming]);\n            }      \n          },\n          seeUserSaying:{\n            keyArgs:[\"id\"],\n            merge(existing=[], incoming){\n              console.log(\"existing:\",existing);\n              console.log('incoming:',incoming);\n              return deduplicate([...existing, ...incoming]);\n            }      \n          },\n          seeUserLike:{\n            keyArgs:[\"id\"],\n            merge(existing=[], incoming){\n              return deduplicate([...existing, ...incoming]);\n            }     \n          }\n        }\n      }\n    }\n  \n  }),\n});\nexport default client;\n\n/*\n\nimport { ApolloClient, InMemoryCache, makeVar } from '@apollo/client';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport const isLoggedInVar = makeVar(false);\nexport const tokenVar = makeVar(\"\");\n\nexport const logUserIn = async (token)=>{\n  await AsyncStorage.multiSet([\n    [\"token\", token],\n    [\"loggedIn\", \"yes\"],\n  ]);\n  isLoggedInVar(true);\n  tokenVar(token);\n}\nexport const logUserOut = async ()=>{\n  await AsyncStorage.multiRemove([\n    \"token\", \n    \"loggedIn\"\n  ]);\n  isLoggedInVar(false);\n  tokenVar(null);\n}\nconst SERVER_URI = \"http://54.180.106.241:4000/graphql\"\n\nconst client = new ApolloClient({\n  uri:SERVER_URI,\n  cache: new InMemoryCache(),\n});\nexport default client;\n*/"]},"metadata":{},"sourceType":"module"}