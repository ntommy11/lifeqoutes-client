{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/ntommy/Projects/wisesaying/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AppLoading from 'expo-app-loading';\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport { Asset } from 'expo-asset';\nimport LoggedOutNav from \"./navigators/LoggedOutNav\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { Appearance, AppearanceProvider } from 'react-native-appearance';\nimport client, { isLoggedInVar, tokenVar } from \"./apollo\";\nimport { ApolloProvider, useReactiveVar } from '@apollo/client';\nimport LoggedInNav from \"./navigators/LoggedInNav\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport default function App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var onFinish = function onFinish() {\n    return setLoading(false);\n  };\n\n  var isLoggedIn = useReactiveVar(isLoggedInVar);\n\n  var preloadAssets = function preloadAssets() {\n    var fontsToLoad = [Ionicons.font];\n    var fontPromises = fontsToLoad.map(function (font) {\n      return Font.loadAsync(font);\n    });\n    console.log(fontPromises);\n    var imagesToLoad = [require(\"./assets/logo.png\")];\n    var imagePromises = imagesToLoad.map(function (image) {\n      return Asset.loadAsync(image);\n    });\n    return Promise.all([].concat(_toConsumableArray(fontPromises), _toConsumableArray(imagePromises)));\n  };\n\n  var preload = function preload() {\n    var token;\n    return _regeneratorRuntime.async(function preload$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"token\"));\n\n          case 2:\n            token = _context.sent;\n            console.log(\"token:\" + token);\n\n            if (token) {\n              isLoggedInVar(true);\n              tokenVar(token);\n            }\n\n            return _context.abrupt(\"return\", preloadAssets());\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (loading) {\n    return React.createElement(AppLoading, {\n      startAsync: preload,\n      onError: console.warn,\n      onFinish: onFinish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 12\n      }\n    });\n  }\n\n  console.log(\"color scheme: \" + Appearance.getColorScheme());\n  var subscription = Appearance.addChangeListener(function (_ref) {\n    var colorScheme = _ref.colorScheme;\n    console.log(colorScheme);\n  });\n  console.log(\"isLoggedIn:\" + isLoggedIn);\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, React.createElement(AppearanceProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, isLoggedIn ? React.createElement(LoggedInNav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 24\n    }\n  }) : React.createElement(LoggedOutNav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 39\n    }\n  }))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/ntommy/Projects/wisesaying/App.js"],"names":["AppLoading","React","useState","Ionicons","Font","Asset","LoggedOutNav","NavigationContainer","Appearance","AppearanceProvider","client","isLoggedInVar","tokenVar","ApolloProvider","useReactiveVar","LoggedInNav","AsyncStorage","App","loading","setLoading","onFinish","isLoggedIn","preloadAssets","fontsToLoad","font","fontPromises","map","loadAsync","console","log","imagesToLoad","require","imagePromises","image","Promise","all","preload","getItem","token","warn","getColorScheme","subscription","addChangeListener","colorScheme","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,YAAP;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,UAAT,EAAqBC,kBAArB,QAA+C,yBAA/C;AACA,OAAOC,MAAP,IAAiBC,aAAjB,EAAgCC,QAAhC;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,gBAA/C;AACA,OAAOC,WAAP;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACEf,QAAQ,CAAC,IAAD,CADV;AAAA;AAAA,MACrBgB,OADqB;AAAA,MACZC,UADY;;AAE5B,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,WAAMD,UAAU,CAAC,KAAD,CAAhB;AAAA,GAAjB;;AACA,MAAME,UAAU,GAAGP,cAAc,CAACH,aAAD,CAAjC;;AAEA,MAAMW,aAAa,GAAG,SAAhBA,aAAgB,GAAI;AAExB,QAAMC,WAAW,GAAG,CAACpB,QAAQ,CAACqB,IAAV,CAApB;AACA,QAAMC,YAAY,GAAGF,WAAW,CAACG,GAAZ,CAAgB,UAAAF,IAAI;AAAA,aAAEpB,IAAI,CAACuB,SAAL,CAAeH,IAAf,CAAF;AAAA,KAApB,CAArB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AAGA,QAAMK,YAAY,GAAG,CAACC,OAAO,qBAAR,CAArB;AACA,QAAMC,aAAa,GAAGF,YAAY,CAACJ,GAAb,CAAiB,UAAAO,KAAK;AAAA,aAAE5B,KAAK,CAACsB,SAAN,CAAgBM,KAAhB,CAAF;AAAA,KAAtB,CAAtB;AAEA,WAAOC,OAAO,CAACC,GAAR,8BAAgBV,YAAhB,sBAAiCO,aAAjC,GAAP;AACD,GAXD;;AAYA,MAAMI,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACMpB,YAAY,CAACqB,OAAb,CAAqB,OAArB,CADN;;AAAA;AACRC,YAAAA,KADQ;AAEdV,YAAAA,OAAO,CAACC,GAAR,YAAqBS,KAArB;;AACA,gBAAGA,KAAH,EAAS;AACP3B,cAAAA,aAAa,CAAC,IAAD,CAAb;AACAC,cAAAA,QAAQ,CAAC0B,KAAD,CAAR;AACD;;AANa,6CAOPhB,aAAa,EAPN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AASA,MAAGJ,OAAH,EAAW;AACT,WAAO,oBAAC,UAAD;AACL,MAAA,UAAU,EAAGkB,OADR;AAEL,MAAA,OAAO,EAAER,OAAO,CAACW,IAFZ;AAGL,MAAA,QAAQ,EAAEnB,QAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAKD;;AACDQ,EAAAA,OAAO,CAACC,GAAR,oBAA6BrB,UAAU,CAACgC,cAAX,EAA7B;AAEA,MAAMC,YAAY,GAAGjC,UAAU,CAACkC,iBAAX,CAA6B,gBAAiB;AAAA,QAAfC,WAAe,QAAfA,WAAe;AACjEf,IAAAA,OAAO,CAACC,GAAR,CAAYc,WAAZ;AACD,GAFoB,CAArB;AAGAf,EAAAA,OAAO,CAACC,GAAR,iBAA0BR,UAA1B;AACA,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEX,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGW,UAAU,GAAE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAF,GAAiB,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD9B,CADF,CADF,CADF;AAUD;AAED,IAAMuB,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import AppLoading from 'expo-app-loading';\nimport React, { useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport { Asset } from 'expo-asset';\nimport LoggedOutNav from './navigators/LoggedOutNav';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { Appearance, AppearanceProvider } from 'react-native-appearance';\nimport client, { isLoggedInVar, tokenVar } from './apollo';\nimport { ApolloProvider, useReactiveVar } from '@apollo/client';\nimport LoggedInNav from './navigators/LoggedInNav';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport default function App() {\n  const [loading, setLoading] = useState(true);\n  const onFinish = () => setLoading(false);\n  const isLoggedIn = useReactiveVar(isLoggedInVar);\n\n  const preloadAssets = ()=>{\n    // 폰트 로딩\n    const fontsToLoad = [Ionicons.font]\n    const fontPromises = fontsToLoad.map(font=>Font.loadAsync(font));\n    console.log(fontPromises);\n\n    // 이미지 로딩\n    const imagesToLoad = [require(\"./assets/logo.png\")];\n    const imagePromises = imagesToLoad.map(image=>Asset.loadAsync(image));\n\n    return Promise.all([...fontPromises, ...imagePromises]);\n  }\n  const preload = async() => {\n    const token = await AsyncStorage.getItem(\"token\");\n    console.log(`token:${token}`);\n    if(token){\n      isLoggedInVar(true);\n      tokenVar(token);\n    }\n    return preloadAssets();\n  }\n  if(loading){\n    return <AppLoading\n      startAsync ={preload}\n      onError={console.warn}\n      onFinish={onFinish}\n      />;\n  }\n  console.log(`color scheme: ${Appearance.getColorScheme()}`);\n\n  const subscription = Appearance.addChangeListener(({colorScheme})=>{\n    console.log(colorScheme);  \n  });\n  console.log(`isLoggedIn:${isLoggedIn}`)\n  return (\n    <ApolloProvider client={client}>\n      <AppearanceProvider>\n        <NavigationContainer>\n          {isLoggedIn? <LoggedInNav/>:<LoggedOutNav/>}\n        </NavigationContainer>\n      </AppearanceProvider>\n    </ApolloProvider>\n  );\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}